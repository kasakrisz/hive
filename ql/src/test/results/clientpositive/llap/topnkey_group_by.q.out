PREHOOK: query: drop table if exists tstore
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists tstore
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table tstore(
  a int,
  b int,
  c int,
  store_name varchar(100)
)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tstore
POSTHOOK: query: create table tstore(
  a int,
  b int,
  c int,
  store_name varchar(100)
)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tstore
PREHOOK: query: insert into tstore values
(5, 1, 2, 'cdf'), (5, 1, 2, 'tre'), (5, 1, 2, 'gtf'),
(5, 2, 3, 'abc'), (6, 2, 1, 'kfd')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@tstore
POSTHOOK: query: insert into tstore values
(5, 1, 2, 'cdf'), (5, 1, 2, 'tre'), (5, 1, 2, 'gtf'),
(5, 2, 3, 'abc'), (6, 2, 1, 'kfd')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@tstore
POSTHOOK: Lineage: tstore.a SCRIPT []
POSTHOOK: Lineage: tstore.b SCRIPT []
POSTHOOK: Lineage: tstore.c SCRIPT []
POSTHOOK: Lineage: tstore.store_name SCRIPT []
PREHOOK: query: explain
select a,b,c from tstore group by a,b,c order by a limit 2
PREHOOK: type: QUERY
PREHOOK: Input: default@tstore
#### A masked pattern was here ####
POSTHOOK: query: explain
select a,b,c from tstore group by a,b,c order by a limit 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tstore
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tstore
                  Statistics: Num rows: 5 Data size: 60 Basic stats: COMPLETE Column stats: COMPLETE
                  Top N Key Operator
                    sort order: +++
                    keys: a (type: int), b (type: int), c (type: int)
                    Statistics: Num rows: 5 Data size: 60 Basic stats: COMPLETE Column stats: COMPLETE
                    top n: 2
                    Select Operator
                      expressions: a (type: int), b (type: int), c (type: int)
                      outputColumnNames: a, b, c
                      Statistics: Num rows: 5 Data size: 60 Basic stats: COMPLETE Column stats: COMPLETE
                      Group By Operator
                        keys: a (type: int), b (type: int), c (type: int)
                        minReductionHashAggr: 0.6
                        mode: hash
                        outputColumnNames: _col0, _col1, _col2
                        Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                          sort order: +++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                          Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                          TopN Hash Memory Usage: 0.1
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  sort order: +
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: int), _col2 (type: int)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: int), VALUE._col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 2
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 2
      Processor Tree:
        ListSink

PREHOOK: query: select a,b,c from tstore group by a,b,c order by a limit 2
PREHOOK: type: QUERY
PREHOOK: Input: default@tstore
#### A masked pattern was here ####
POSTHOOK: query: select a,b,c from tstore group by a,b,c order by a limit 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tstore
#### A masked pattern was here ####
5	2	3
5	1	2
PREHOOK: query: explain
select a,b,c from tstore group by a,b,c order by a limit 2
PREHOOK: type: QUERY
PREHOOK: Input: default@tstore
#### A masked pattern was here ####
POSTHOOK: query: explain
select a,b,c from tstore group by a,b,c order by a limit 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tstore
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tstore
                  Statistics: Num rows: 5 Data size: 60 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: a (type: int), b (type: int), c (type: int)
                    outputColumnNames: a, b, c
                    Statistics: Num rows: 5 Data size: 60 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: a (type: int), b (type: int), c (type: int)
                      minReductionHashAggr: 0.6
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: int), _col1 (type: int), _col2 (type: int)
                        Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                        TopN Hash Memory Usage: 0.1
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  sort order: +
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  TopN Hash Memory Usage: 0.1
                  value expressions: _col1 (type: int), _col2 (type: int)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: int), VALUE._col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 2
                  Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 2 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 2
      Processor Tree:
        ListSink

PREHOOK: query: select a,b,c from tstore group by a,b,c order by a limit 2
PREHOOK: type: QUERY
PREHOOK: Input: default@tstore
#### A masked pattern was here ####
POSTHOOK: query: select a,b,c from tstore group by a,b,c order by a limit 2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tstore
#### A masked pattern was here ####
5	2	3
5	1	2
